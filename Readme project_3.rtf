{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red128\green128\blue128;}
{\*\expandedcolortbl;;\csgenericrgb\c50196\c50196\c50196;}
\margl1440\margr1440\vieww18040\viewh13380\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 Sahaj Somani\cf0 \
\cf2 29999484\
ssomani@u.rochester.edu\cf0 \
\cf2 Project 3\cf0 \
\cf2 MW 12:30-1:45\
I collaborated with Nikita Kim on this assignment\
\
Description:\
1. The source folder contains all the required files - Graph, Node, Edge, Canvas and StreetMap.\
2. All intersections are stored in the a hash map called vertices in the Graph class in the format <String, Node> to prevent duplicates.\
3. Every Node has certain properties such as a list of neighbors, id, latitude, longitude, weight and some other helping methods such as isVisited etc.\
4. The edge class is solely for calculating the distance between 2 vertices using latitudes and longitudes.\
5. The canvas class makes the map using a JPanel.\
6. All code has been written as neatly as possible using methods and commented out for clarity.\
7. The hardest part of the code was deciding on an architecture that is optimal and implementing Dijkstra\'92s in a different manner so that it returns a list of nodes rather than the shortest distance.\
\
Attempts for Extra Credit:\
1. The map is resizable\
2. The implementation of the graphics of the map is such that it checks for already drawn edges and does not draw them again when they are found in the adjacency list of a neighboring node. This saves a lot of time, especially with the larger files.\
3. The map colors the shortest path in a different color and makes destination symbols like seen in google maps at the source and destination.\
4. The architecture of the code and implementations of all classes together allows for an optimized runtime than otherwise.\
\
Hope you like the project! Happy Holidays!}